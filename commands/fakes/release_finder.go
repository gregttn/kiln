// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"sync"

	"github.com/pivotal-cf/kiln/commands"
	"github.com/pivotal-cf/kiln/fetcher"
	"github.com/pivotal-cf/kiln/internal/cargo"
)

type ReleaseFinder struct {
	DownloadReleasesStub        func(string, []fetcher.RemoteRelease, int) (fetcher.LocalReleaseSet, error)
	downloadReleasesMutex       sync.RWMutex
	downloadReleasesArgsForCall []struct {
		arg1 string
		arg2 []fetcher.RemoteRelease
		arg3 int
	}
	downloadReleasesReturns struct {
		result1 fetcher.LocalReleaseSet
		result2 error
	}
	downloadReleasesReturnsOnCall map[int]struct {
		result1 fetcher.LocalReleaseSet
		result2 error
	}
	GetMatchedReleasesStub        func(fetcher.ReleaseRequirementSet, cargo.Stemcell) ([]fetcher.RemoteRelease, error)
	getMatchedReleasesMutex       sync.RWMutex
	getMatchedReleasesArgsForCall []struct {
		arg1 fetcher.ReleaseRequirementSet
		arg2 cargo.Stemcell
	}
	getMatchedReleasesReturns struct {
		result1 []fetcher.RemoteRelease
		result2 error
	}
	getMatchedReleasesReturnsOnCall map[int]struct {
		result1 []fetcher.RemoteRelease
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *ReleaseFinder) DownloadReleases(arg1 string, arg2 []fetcher.RemoteRelease, arg3 int) (fetcher.LocalReleaseSet, error) {
	var arg2Copy []fetcher.RemoteRelease
	if arg2 != nil {
		arg2Copy = make([]fetcher.RemoteRelease, len(arg2))
		copy(arg2Copy, arg2)
	}
	fake.downloadReleasesMutex.Lock()
	ret, specificReturn := fake.downloadReleasesReturnsOnCall[len(fake.downloadReleasesArgsForCall)]
	fake.downloadReleasesArgsForCall = append(fake.downloadReleasesArgsForCall, struct {
		arg1 string
		arg2 []fetcher.RemoteRelease
		arg3 int
	}{arg1, arg2Copy, arg3})
	fake.recordInvocation("DownloadReleases", []interface{}{arg1, arg2Copy, arg3})
	fake.downloadReleasesMutex.Unlock()
	if fake.DownloadReleasesStub != nil {
		return fake.DownloadReleasesStub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.downloadReleasesReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *ReleaseFinder) DownloadReleasesCallCount() int {
	fake.downloadReleasesMutex.RLock()
	defer fake.downloadReleasesMutex.RUnlock()
	return len(fake.downloadReleasesArgsForCall)
}

func (fake *ReleaseFinder) DownloadReleasesCalls(stub func(string, []fetcher.RemoteRelease, int) (fetcher.LocalReleaseSet, error)) {
	fake.downloadReleasesMutex.Lock()
	defer fake.downloadReleasesMutex.Unlock()
	fake.DownloadReleasesStub = stub
}

func (fake *ReleaseFinder) DownloadReleasesArgsForCall(i int) (string, []fetcher.RemoteRelease, int) {
	fake.downloadReleasesMutex.RLock()
	defer fake.downloadReleasesMutex.RUnlock()
	argsForCall := fake.downloadReleasesArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *ReleaseFinder) DownloadReleasesReturns(result1 fetcher.LocalReleaseSet, result2 error) {
	fake.downloadReleasesMutex.Lock()
	defer fake.downloadReleasesMutex.Unlock()
	fake.DownloadReleasesStub = nil
	fake.downloadReleasesReturns = struct {
		result1 fetcher.LocalReleaseSet
		result2 error
	}{result1, result2}
}

func (fake *ReleaseFinder) DownloadReleasesReturnsOnCall(i int, result1 fetcher.LocalReleaseSet, result2 error) {
	fake.downloadReleasesMutex.Lock()
	defer fake.downloadReleasesMutex.Unlock()
	fake.DownloadReleasesStub = nil
	if fake.downloadReleasesReturnsOnCall == nil {
		fake.downloadReleasesReturnsOnCall = make(map[int]struct {
			result1 fetcher.LocalReleaseSet
			result2 error
		})
	}
	fake.downloadReleasesReturnsOnCall[i] = struct {
		result1 fetcher.LocalReleaseSet
		result2 error
	}{result1, result2}
}

func (fake *ReleaseFinder) GetMatchedReleases(arg1 fetcher.ReleaseRequirementSet, arg2 cargo.Stemcell) ([]fetcher.RemoteRelease, error) {
	fake.getMatchedReleasesMutex.Lock()
	ret, specificReturn := fake.getMatchedReleasesReturnsOnCall[len(fake.getMatchedReleasesArgsForCall)]
	fake.getMatchedReleasesArgsForCall = append(fake.getMatchedReleasesArgsForCall, struct {
		arg1 fetcher.ReleaseRequirementSet
		arg2 cargo.Stemcell
	}{arg1, arg2})
	fake.recordInvocation("GetMatchedReleases", []interface{}{arg1, arg2})
	fake.getMatchedReleasesMutex.Unlock()
	if fake.GetMatchedReleasesStub != nil {
		return fake.GetMatchedReleasesStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getMatchedReleasesReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *ReleaseFinder) GetMatchedReleasesCallCount() int {
	fake.getMatchedReleasesMutex.RLock()
	defer fake.getMatchedReleasesMutex.RUnlock()
	return len(fake.getMatchedReleasesArgsForCall)
}

func (fake *ReleaseFinder) GetMatchedReleasesCalls(stub func(fetcher.ReleaseRequirementSet, cargo.Stemcell) ([]fetcher.RemoteRelease, error)) {
	fake.getMatchedReleasesMutex.Lock()
	defer fake.getMatchedReleasesMutex.Unlock()
	fake.GetMatchedReleasesStub = stub
}

func (fake *ReleaseFinder) GetMatchedReleasesArgsForCall(i int) (fetcher.ReleaseRequirementSet, cargo.Stemcell) {
	fake.getMatchedReleasesMutex.RLock()
	defer fake.getMatchedReleasesMutex.RUnlock()
	argsForCall := fake.getMatchedReleasesArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *ReleaseFinder) GetMatchedReleasesReturns(result1 []fetcher.RemoteRelease, result2 error) {
	fake.getMatchedReleasesMutex.Lock()
	defer fake.getMatchedReleasesMutex.Unlock()
	fake.GetMatchedReleasesStub = nil
	fake.getMatchedReleasesReturns = struct {
		result1 []fetcher.RemoteRelease
		result2 error
	}{result1, result2}
}

func (fake *ReleaseFinder) GetMatchedReleasesReturnsOnCall(i int, result1 []fetcher.RemoteRelease, result2 error) {
	fake.getMatchedReleasesMutex.Lock()
	defer fake.getMatchedReleasesMutex.Unlock()
	fake.GetMatchedReleasesStub = nil
	if fake.getMatchedReleasesReturnsOnCall == nil {
		fake.getMatchedReleasesReturnsOnCall = make(map[int]struct {
			result1 []fetcher.RemoteRelease
			result2 error
		})
	}
	fake.getMatchedReleasesReturnsOnCall[i] = struct {
		result1 []fetcher.RemoteRelease
		result2 error
	}{result1, result2}
}

func (fake *ReleaseFinder) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.downloadReleasesMutex.RLock()
	defer fake.downloadReleasesMutex.RUnlock()
	fake.getMatchedReleasesMutex.RLock()
	defer fake.getMatchedReleasesMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *ReleaseFinder) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ commands.ReleaseFinder = new(ReleaseFinder)
